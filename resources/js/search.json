[[{"i":"#","p":["Enabling HTTPS and securing cookies on GliNet routers to ensure no sensitive data is being transmitted over insecure channels."]},{"l":"GliNet Router Hardening","p":["This guide applies to firmware version v4.5.19 - There might be differences between older versions. Also some of these changes may be removed during an update, so make sure to check these (mainly applies to direct config file changes).","The GliNet travel routes are quite useful, not only because they are small, but also because they support a wide range of addons like AdGuard or Wireguard.","While these routers are nice to travel with, there are some settings which can improve security on these devices.","This is not an exhaustive list, but something I noticed while toying with this router for a bit:","Harden the webserver","HTTPS on AdGuard","Fix cookies"]},{"l":"Harden the webserver","p":["After the login, we navigate to the security page and enable the toggle Force HTTPS. This causes nginx to reboot and we have to log in again.","Since we are already in the security page, we may disable all Remote Access Control settings, unless required.","Forcing HTTPS","Next we take a look at the TLS protocols nginx enables on this device. For this we take a look at /etc/nginx/conf.d/gl.conf:","We notice that both TLSv1 and TLSv1.1 are offered. We can safely remove these and instead add TLSv1.3. Now we have to restart nginx again: service nginx restart.","You might also have noticed ssl_certificate and content_by_lua_file- these files will be important later.","You may also add additional headers like HSTS, which would prevent the browser from ever connecting over HTTP. But if an update would happen to revert the config back, you wouldn't be able to connect without clearing HSTS in your browser. Also feel free to change ciphers or disable server tokens. But this is not the main focus here.","You can connect to the GliNet router using SSH with root and your password."]},{"l":"HTTPS on AdGuard","p":["If you have enabled AdGuard as I did, the web interface will always redirect to the AdGuard site over HTTP (regardless on the setting above). Since the login data is stored within a cookie ( Admin-Token), everyone on that network could potentially sniff it and use it to log in.","Now, we are going to change that!","We recall from before that nginx uses the certificate located at /etc/nginx/nginx.cer and its corresponding key (/etc/nginx/nginx.key). We can tell AdGuard to also use this certificate for HTTPS. It will complain that the certificate is invalid, but in our case self signed certificates are OK (using a valid certificate is left as an exercise for the reader).","Importing certificates","You may also create your own certificate and point AdGuard to that certificate:"]},{"l":"The problem with insecure cookies","p":["Although AdGuard is now also served over HTTPS, this still does not completely fix the issue that the admin cookie could be sent over HTTP. This is because nginx simply does not apply the secure flag on cookies.","Since the GliNet UI would always redirect to AdGuard via HTTP, we can either change the UI or add the secure flag to our cookie, the latter probably being easier.","We now have to figure out, when and how this cookie is being issued. We can use our trusty dev-tools and observe the login process. We notice that many calls are made to the /rpc endpoint. One in particular also returns our Admin-Token- Hoooray!","Issued admin cookie","We know from looking at nginx' config file, that calls to the /rpc endpoint are managed by /usr/share/gl-ngx/oui-rpc.lua, which we are now going to modify.","Inside the function rpc_method_login, we see that nginx sets the cookie Admin-Token to some value. After appending .. ; Secure to this line, we force nginx to serve our admin cookie with the secure flag. Now we have to restart nginx once again.","If you have other websites running on GliNet which require this cookie, make sure to enable HTTPS for these as well."]},{"l":"Old"},{"l":"New"}],[{"i":"#","p":["HomeAssistant suffers from an authorization bypass, which allows low privileged users access to all addons."]},{"l":"Authorization bypass in HomeAssistant","p":["This writeup describes a vulnerability in HomeAssistant, a popular smart home gateway. HomeAssistant consists of multiple parts, making up its ecosystem and its functionality can be further extended via integrations or addons.","Unfortunately, HomeAssistant (HASS) uses its name quite often within their ecosystem, so we have to make some important distinctions:","HASS Core - This is the core system, which you can deploy everywhere using docker. This component ultimately integrates with your IoT devices","HASS Supervisor - It provides quality of life features like backups for HASS Core. When used with HAOS, it can also manage the OS. Sometimes it is referred to by its former name \"HASSIO\".","HAOS - The HomeAssistant Operating System can be described as a tailored Docker Engine. It basically runs each component within its own container - this includes stuff like CoreDNS, HASS Core, HASS Supervisor, HASS Observer, different addons and a bunch of other components...","If you use both HASS Core and HASS Supervisor (not the OS!), this is called a supervised installation.","I will mostly talk about HASS Core in this blog, but I'll explicitly mention specific components where it is important."]},{"l":"The Vulnerability","p":["HomeAssistant suffers from an authorization bypass, where unprivileged users can access addons, restricted to administrators. The vulnerability lies in HomeAssistants ingress functionality, which proxies requests to the addon. During this process, no validation is performed whether a user is allowed to access the addon.","The impact heavily depends on the installed addons. In case the SSH & Web Terminal Add-on is installed, a user could access the addon's panel and gain RCE on the system.","In order to access an addon, a valid ingress session cookie and ingress URL is required. These values can be requested by any low privileged user who knows the addon slug.","Authorization bypass","At the time of writing, this vulnerability is present on the latest version of HASS Supervised and HASS Operating System. According to the opt-in integration analytics provided by Home Assistant, the affected integration was introduced in Home Assistant 0.42 and is used by 80.1% of the active installations (as of October 2024). Although not tested, the vulnerability might also affect Home Assistant Cloud, since it proxies requests.","This vulnerability has already been disclosed to HomeAssistant in August 2023, more information about this can be seen below."]},{"l":"Tested Versions","p":["This vulnerability can only be exploited on Supervised or HAOS installations where addons are present. It was tested on the following versions","HASS Core <= 2024.10.4","Supervisor <= 2024.10.3","Operating System <= 13.2"]},{"l":"How does it work"},{"l":"Addons and Addon registration","p":["Addons are used to add extra functionality to HomeAssistant, like a web TTY or file editor. These addons run in a separate docker container and can be accessed through HomeAssistant via the ingress functionality.","As soon as the HASSIO integration (the \"supervisor\" integration) starts its initialization, async_setup_addon_panel() is called, which then retrieves a list of addons from the supervisor and registers them as a Panel:","async_setup_addon_panel()","hassio_addon_panel.get_panels()","hassio.get_ingress_panels() This function retrieves a list of addons from supervisor via a GET /ingress/panels request. You can follow its implementation here","_register_panel()","panel_custom.async_register_panel()","frontend.async_register_built_in_panel()","Panel() This is the base panel class, used by every panel within HomeAssistant"]},{"l":"Panels","p":["Panels can be described as pages, which are rendered inside the HomeAssistant frontend. As described previously, addon frontends are internally handled as Panel objects.","When querying the websocket API using {type:get_panels, id:XX} as an administrator, HASS returns a list of available panels. Some of these panels have the require_admin field set to true. According to the custom panel documentation, only administrators should be able to see these panels. When querying the same endpoint as a non-admin user, only panels with require_admin set to false are returned.","These panels will only be excluded from the sidebar for non-administrators. You can also find this in one of the comments in the panel definition: homeassistant\\components\\frontend\\__init__.py"]},{"l":"The API","p":["HomeAssistant has two ways of publishing its API, namely plain HTTP and websockets. One key difference between these is that calls over websockets are always authenticated. The APIs are also protected by regex which both filters potentially harmful traffic and only allows admins access to specific resources.","While HASS Core has many different endpoints, it also proxies requests to the supervisor, which are published through the websocket. Additionally, most of these endpoints require administrative permissions with two exceptions:","Requesting information about a specific addon: {type:supervisor/api,endpoint:/addons/{slug}/info,method:get,id:XX}","Requesting and validating an ingress session token: {type:supervisor/api,endpoint:/ingress/session,method:post,id:XX}","The first request is used to get information about a specific addon, including its access path ( ingress URL) while the second call requests a session cookie ( ingress_session) from the supervisor, which is required to access the addon URL.","With these two values we can now access every addon, provided the slug is known. These slugs can be easily enumerated, but this is outside the scope of this blog.","This snippet shows allowed supervisor API endpoints:","A valid ingress cookie is the last piece of the puzzle to access the addon:"]},{"l":"Disclosure","p":["I reported this issue back in August 2023, however I was told, that \"user permissions can only be considered a visual change in the Home Assistant UI\", which is also highlighted in the official documentation here.","I assume that this vulnerability will be present in future versions until HomeAssistant decides to enforce a strict separation between users and administrators."]}],[{"l":"About me","p":["Hi, I'm unbless3d - A random infosec student and this is my attempt on a blog where I will post stuff I found or I think is interesting."]}]]