[[{"i":"#","p":["Enabling HTTPS and securing cookies on GliNet routers to ensure no sensitive data is being transmitted over insecure channels."]},{"l":"GliNet Router Hardening","p":["The GliNet travel routes are quite useful, especially as they support a wide range of addons like AdGuard.","If you have enabled AdGuard as I did, the router will always redirect to HTTP. Since the login data is stored within a cookie, everyone on that network could potentially sniff it and use it to log in.","Now, we are going to change that!"]},{"l":"Harden the webserver","p":["Because we want to use HTTPS everywhere, we need to create a self-signed certificate and put it into /etc/nginx/:","Next we need to slightly modify the nginx config, so that it will always upgrade to an HTTPS connection (at least on port 80). After that, simply restart the webserver.","If everything worked out, you should now be automatically redirected to HTTPs. Hooray!","You can also add other headers like HSTS, which would prevent the browser from ever connecting over HTTP. But if an update would happen to revert the config back, you wouldn't be able to connect without clearing HSTS in your browser."]},{"l":"Hardening AdGuard","p":["If you use AdGuard on your travel router to block certain domains, you can (and should) configure it to use your previously added certificate. It will complain that the certificate is invalid, but in our case self signed certificates are OK (you can also issue a real one).","Importing certificates"]},{"l":"The problem with insecure cookies","p":["Since nginx does not append the secure flag on cookies, if your browser gets redirected it might happen, that it tries so over HTTP. This would expose your session cookie again, which we try to prevent.","Since the GliNet UI would always redirect to AdGuard using HTTP, we can either change the UI, or add the secure flag to our cookie, which is probably easier.","To do that, change the the following line in file /usr/share/gl-ngx/oui-rpc.lua and restart nginx."]},{"l":"Old"},{"l":"New"}],[{"i":"#","p":["HomeAssistant suffers from an authorization bypass, which allows low privileged users access to all addons."]},{"l":"Authorization bypass in HomeAssistant","p":["This writeup describes a vulnerability in HomeAssistant, a popular smart home gateway. HomeAssistant consists of multiple parts, making up its ecosystem and its functionality can be further extended via integrations or addons.","Unfortunately, HomeAssistant (HASS) uses its name quite often within their ecosystem, so we have to make some important distinctions:","HASS Core - This is the core system, which you can deploy everywhere using docker. This component ultimately integrates with your IoT devices","HASS Supervisor - It provides quality of life features like backups for HASS Core. When used with HAOS, it can also manage the OS. Sometimes it is referred to by its former name \"HASSIO\".","HAOS - The HomeAssistant Operating System can be described as a tailored Docker Engine. It basically runs each component within its own container - this includes stuff like CoreDNS, HASS Core, HASS Supervisor, HASS Observer, different addons and a bunch of other components...","If you use both HASS Core and HASS Supervisor (not the OS!), this is called a supervised installation.","I will mostly talk about HASS Core in this blog, but I'll explicitly mention specific components where it is important."]},{"l":"The Vulnerability","p":["HomeAssistant suffers from an authorization bypass, where unprivileged users can access addons, restricted to administrators. The vulnerability lies in HomeAssistants ingress functionality, which proxies requests to the addon. During this process, no validation is performed whether a user is allowed to access the addon.","The impact heavily depends on the installed addons. In case the SSH & Web Terminal Add-on is installed, a user could access the addon's panel and gain RCE on the system.","In order to access an addon, a valid ingress session cookie and ingress URL is required. These values can be requested by any low privileged user who knows the addon slug.","Authorization bypass","At the time of writing, this vulnerability is present on the latest version of HASS Supervised and HASS Operating System. According to the opt-in integration analytics provided by Home Assistant, the affected integration was introduced in Home Assistant 0.42 and is used by 80.1% of the active installations (as of October 2024). Although not tested, the vulnerability might also affect Home Assistant Cloud, since it proxies requests.","This vulnerability has already been disclosed to HomeAssistant in August 2023, more information about this can be seen below."]},{"l":"Affected Versions","p":["This vulnerability can only be exploited on Supervised or HAOS installations where addons are present:","HASS Core <= 2024.10.0","Supervisor <= 2024.09.1","Operating System <= 13.1"]},{"l":"How does it work"},{"l":"Addons and Addon registration","p":["Addons are used to add extra functionality to HomeAssistant, like a web TTY or file editor. These addons run in a separate docker container and can be accessed through HomeAssistant via the ingress functionality.","As soon as the HASSIO integration (the \"supervisor\" integration) starts its initialization, async_setup_addon_panel() is called, which then retrieves a list of addons from supervisor and registers them as a Panel:","async_setup_addon_panel()","hassio_addon_panel.get_panels()","hassio.get_ingress_panels() This function retrieves a list of addons from supervisor via a GET /ingress/panels request. You can follow its implementation here","_register_panel()","panel_custom.async_register_panel()","frontend.async_register_built_in_panel()","Panel() This is the base panel class, used by every panel within HomeAssistant"]},{"l":"Panels","p":["Panels can be described as pages, which are rendered inside the HomeAssistant frontend. As described previously, addon frontends are internally handled as Panel objects.","When querying the websocket API using {type:get_panels, id:XX} as an administrator, HASS returns a list of available panels. Some of these panels have the require_admin field set to true. According to the custom panel documentation, only administrators should be able to see these panels. When querying the same endpoint as a non-admin user, only panels with require_admin set to false are returned.","These panels will only be excluded from the sidebar for non-administrators. You can also find this in one of the comments in the panel definition: homeassistant\\components\\frontend\\__init__.py"]},{"l":"The supervisor API","p":["HomeAssistant uses regex to partially restrict access to specific resources - either by completely blocking them or requiring admin permissions. This is true for both the HTTP API and the websocket API. One key difference between these APIs is that the websocket API is always authenticated.","HASS Core also publishes a supervisor API and proxies requests to the supervisor. This API requires a user to have administrative rights with two exceptions:","Requesting information about a specific addon{type:supervisor/api,endpoint:/ingress/session,method:post,id:XX}","Requesting and validating an ingress session token{type:supervisor/api,endpoint:/addons/{slug}/info,method:get,id:XX}","These two requests however are enough to access an addon, provided the addon slug is known. These slugs can be easily enumerated, but this is outside the scope of this blog.","The first request is used to get information about a specific addon, which includes its access path (also called ingress URL).","The second request issues a session cookie (called ingress_session) by the supervisor, which is required to access the addon URL."]},{"l":"Disclosure","p":["I reported this issue back in August 2023, however I was told, that \"user permissions can only be considered a visual change in the Home Assistant UI\", which is also highlighted in the official documentation here."]}],[{"l":"About me","p":["Hi, I'm unbless3d - A random infosec student and this is my attempt on a blog where I will post stuff I found or I think is interesting."]}]]